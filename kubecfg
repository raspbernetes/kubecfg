#!/usr/bin/env bash

set -eo pipefail

[[ -n $DEBUG ]] && set -x
INSECURE=${INSECURE:-false}

USER_NAME=${USER_NAME:-kube-admin-user}
NAMESPACE=${NAMESPACE:-default}
CLUSTER_NAME=${CLUSTER:-kubernetes}

usage(){
    echo "Usage:"
    echo ""
    echo "  [env] kubecfg <command>"
    echo ""
    echo "The commands are:"
    echo ""
    echo "  all           (a)   Approve a Kubernetes certificate signing request"
    echo "  create        (c)   Create a Kubernetes certificate signing request and apply manifest"
    echo "  approve       (p)   Approve a Kubernetes certificate signing request"
    echo "  kubeconfig    (k)   Generates the kubeconfig - requires existing CSR has been approved and exists in the cluster"
    echo "  show          (s)   Print the kubeconfig to STDOUT"
    echo "  delete        (d)   Delete all locally generated files. This does not include resources created in the cluster"
    echo ""
    echo "Environment variables:"
    echo ""
    echo "  \$USER_NAME   Set the user name to use for RBAC, this will be the user provided with auth access. Default: 'cluster-admin-user'. (optional)"
    echo "  \$NAMESPACE   Set the namespace that will be used as the default kubeconfig context. Default: 'default'. (optional)"
    echo "  \$CLUSTER     Set cluster name to use, this should match what is in your kubeconfig. Default: 'kubernetes'. (optional)"
    echo "  \$INSECURE    Enable TLS insecure-skip-tls-verify. Default: false (optional)"
    echo "  \$DEBUG       Set logging to verbose. (optional)"
}

if ! [ -x "$(command -v openssl)" ]; then
    echo 'Error: openssl is not installed.' >&2
    exit 1
fi

if ! [ -x "$(command -v kubectl)" ]; then
    echo 'Error: kubectl is not installed.' >&2
    exit 1
fi

all() {
    create
    approve
    config
    generate_kubeconfig
    set_rbac_permissions
}

config() {
    # After CSR is approved it takes a few seconds to update the resources
    sleep 2
    kubectl get csr access-request -o jsonpath='{.status.certificate}' | base64 --decode > client.pem
    kubectl config view -o=jsonpath="{.clusters[?(@.name=='${CLUSTER_NAME}')].cluster.certificate-authority-data}" --raw | base64 --decode - > ca.pem
}

create() {
    echo "Checking if key already exists..."
    sed "s/\$CN/${USER_NAME}/g" template.conf > csr.conf
    echo "Generating certificate signing request and key with OpenSSL..."
    openssl req -new -config csr.conf -keyout key.pem -out "${USER_NAME}.csr"
    CSR_OUTPUT=$(< "${USER_NAME}.csr" base64 | tr -d '\n')
    sed "s/\$CSR/${CSR_OUTPUT}/g" template.yaml > csr.yaml
    echo "Generated kubernetes certificate signing request manifest..."
}

approve() {
    echo "Approving certificate signing request"
    kubectl apply -f csr.yaml
    kubectl certificate approve access-request
}

create_kubeconfig() {
    config
    generate_kubeconfig
}

generate_kubeconfig() {
    # TODO: Resolve DNS without cert signed issue.
    if [[ $INSECURE == "true" ]]; then
        kubectl config set-cluster "$(kubectl config view -o jsonpath='{.clusters[0].name}')" \
            --server="https://api-server.raspbernetes.com" \
            --insecure-skip-tls-verify \
            --kubeconfig=kube.conf
    else
        kubectl config set-cluster "${CLUSTER_NAME}" \
            --server="$(kubectl config view -o jsonpath="{.clusters[?(@.name=='${CLUSTER_NAME}')].cluster.server}")" \
            --certificate-authority=ca.pem \
            --kubeconfig=kube.conf \
            --embed-certs
    fi
    kubectl config set-credentials "${USER_NAME}" \
        --client-certificate=client.pem \
        --client-key=key.pem \
        --kubeconfig=kube.conf \
        --embed-certs
    kubectl config set-context "${USER_NAME}@${CLUSTER_NAME}" \
        --cluster="${CLUSTER_NAME}" \
        --user="${USER_NAME}" \
        --namespace="${NAMESPACE}" \
        --kubeconfig=kube.conf
    kubectl config use-context "${USER_NAME}@${CLUSTER_NAME}" \
        --kubeconfig=kube.conf
}

print_kubeconfig() {
    if [[ ! -f kube.conf ]]; then
        echo "kubeconfig hasn't been created"
        exit 1
    fi
    cat kube.conf
    echo ""
    echo "To use the generated kubeconfig simple pass \"--kubeconfig=kube.conf\" into the kubectl command"
    echo "Examples:"
    echo ""
    echo -e "\tkubectl get pods --kubeconfig=kube.conf"
    echo -e "\tkubectl get nodes --kubeconfig=kube.conf"
}

set_rbac_permissions() {
    echo "Setting admin permissions for user: ${USER_NAME}"
    kubectl create clusterrolebinding "${USER_NAME}" --namespace="${NAMESPACE}" --clusterrole=cluster-admin --user="${USER_NAME}"
}

delete() {
    echo "Delete all locally generated files..."
    rm -f "${USER_NAME}.csr" key.pem csr.yaml ca.pem kube.conf client.pem csr.conf
    echo "Delete Kubernetes resources"
    kubectl delete csr access-request
    kubectl delete clusterrolebinding "${USER_NAME}"
}

case "${1:-}" in
    all|a)
        all
        ;;
    create|c)
        create
        ;;
    approve|p)
        approve
        ;;
    kubeconfig|k)
        create_kubeconfig
        ;;
    show|s)
        print_kubeconfig
        ;;
    rbac|r)
        set_rbac_permissions
        ;;
    delete|d)
        delete
        ;;
    *)
        usage >&2
        exit 1
        ;;
esac
